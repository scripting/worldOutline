<?xml encoding="ISO-8859-1" version="1.0"?>
<opml version="2.0">
	<head>
		<title>wo.js</title>
		<dateModified>&lt;%dateModified%></dateModified>
		<expansionState></expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>300</windowTop>
		<windowLeft>700</windowLeft>
		<windowBottom>900</windowBottom>
		<windowRight>1500</windowRight>
		</head>
	<body text="wo.js">
		<outline created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831" text="var myVersion = &quot;0.49j&quot;, myProductName = &quot;World Outline&quot;; "></outline>
		<outline text="var fs = require (&quot;fs&quot;);"></outline>
		<outline text="var request = require (&quot;request&quot;);"></outline>
		<outline text="var opmlParser = require (&quot;opmlparser&quot;);"></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="var http = require (&quot;http&quot;); "></outline>
		<outline created="Thu, 26 Dec 2013 23:02:58 GMT" pgfnum="34549" text="var https = require (&quot;https&quot;);"></outline>
		<outline created="Tue, 21 Jan 2014 00:09:23 GMT" pgfnum="36074" text="var urlpack = require (&quot;url&quot;);"></outline>
		<outline text="var marked = require (&quot;marked&quot;);"></outline>
		<outline text="var strftime = require (&quot;strftime&quot;);"></outline>
		<outline text="var dns = require (&quot;dns&quot;);"></outline>
		<outline text="var utils = require (&quot;./lib/utils.js&quot;); //7/15/15 by DW"></outline>
		<outline text="var opml = require (&quot;./lib/opml.js&quot;); //7/15/15 by DW"></outline>
		<outline text=""></outline>
		<outline text="var riverConfig = {">
			<outline text="enclosureIconHtml: &quot;&lt;i class=\&quot;fa fa-headphones\&quot;&gt;&lt;/i&gt;&quot;,"></outline>
			<outline text="flEnclosureIcon: true,"></outline>
			<outline text="flShareIcon: true,"></outline>
			<outline text="flOutlinesExpandedByDefault: false, //4/16/15 by DW"></outline>
			<outline text="getExtraFooterCallback: function (item, theFooter) {">
				<outline text="return (theFooter);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="includeFeedInRiverCallback: function (feed) {">
				<outline text="return (true);"></outline>
				<outline text="},"></outline>
				</outline>
			<outline text="includeItemInRiverCallback: function (item) {">
				<outline text="return (true);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var serialnumForRiverRender = 0;"></outline>
		<outline text="var configFname = &quot;config.json&quot;;"></outline>
		<outline text="var appConfig = {">
			<outline text="port: 80,"></outline>
			<outline text="&quot;disqusGroupname&quot;: &quot;scripting&quot;,"></outline>
			<outline text="&quot;urlRootOutline&quot;: &quot;http://liveblog.co/users/davewiner/outlines/outline005.opml&quot;"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="var globalDomains;"></outline>
		<outline text="var worldOutlineStats = {">
			<outline text="ctStarts: 0, "></outline>
			<outline text="whenLastStart: new Date (0),"></outline>
			<outline text="ctHits: 0, ctHitsToday: 0,"></outline>
			<outline text="whenLastHit: new Date (0),"></outline>
			<outline text="ctWriteStats: 0,"></outline>
			<outline text="whenLastWriteStats: new Date (0),"></outline>
			<outline text="hitsByDomain: {},"></outline>
			<outline text="hitsByDomainToday: {},"></outline>
			<outline text="hitsByUrlToday: {}"></outline>
			<outline text="};"></outline>
			</outline>
		<outline text="var fnameStats = &quot;stats.json&quot;, flStatsDirty = false;"></outline>
		<outline text=""></outline>
		<outline text="var renderedPagesFolder = &quot;renderedPages/&quot;;"></outline>
		<outline text=""></outline>
		<outline text="var outlineCache = new Object (), maxCacheSecs = 15;"></outline>
		<outline text=""></outline>
		<outline isComment="true" text="[[http://fargo.io/code/node/shared/utils.js]]"></outline>
		<outline text="[[http://fargo.io/code/node/shared/templates.js]]"></outline>
		<outline text=""></outline>
		<outline text=""></outline>
		<outline text="function fsSureFilePath (path, callback) { ">
			<outline text="var splits = path.split (&quot;/&quot;);"></outline>
			<outline text="path = &quot;&quot;; //1/8/15 by DW"></outline>
			<outline text="if (splits.length &gt; 0) {">
				<outline text="function doLevel (levelnum) {">
					<outline text="if (levelnum &lt; (splits.length - 1)) {">
						<outline text="path += splits [levelnum] + &quot;/&quot;;"></outline>
						<outline text="fs.exists (path, function (flExists) {">
							<outline text="if (flExists) {">
								<outline text="doLevel (levelnum + 1);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="fs.mkdir (path, undefined, function () {">
									<outline text="doLevel (levelnum + 1);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="doLevel (0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function logRequest (httpRequest) { //5/27/15 by DW">
			<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="var parsedUrl = urlpack.parse (httpRequest.url, true), lowerpath = parsedUrl.pathname.toLowerCase ();"></outline>
			<outline created="Mon, 10 Feb 2014 04:02:18 GMT" pgfnum="37342" text="var now = new Date (), host = httpRequest.headers.host, referrer, port = &quot;80&quot;;"></outline>
			<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
				<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"></outline>
				<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="//set referrer">
				<outline text="referrer = httpRequest.headers.referer;"></outline>
				<outline text="if (referrer == undefined) {">
					<outline text="referrer = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				</outline>
			<outline text="dns.reverse (httpRequest.connection.remoteAddress, function (err, domains) {">
				<outline text="var client = httpRequest.connection.remoteAddress;"></outline>
				<outline text="if (!err) {">
					<outline text="if (domains.length &gt; 0) {">
						<outline text="client = domains [0];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (client == undefined) { //1/25/15 by DW">
					<outline text="client = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + httpRequest.method + &quot; &quot; + host + &quot;:&quot; + port + &quot; &quot; + lowerpath + &quot; &quot; + referrer + &quot; &quot; + client);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function writeStats (f, stats, callback) {">
			<outline text="fs.writeFile (f, utils.jsonStringify (stats), function (err) {">
				<outline text="if (err) {">
					<outline text="console.log (&quot;writeStats: error == &quot; + err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback != undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function readStats (f, stats, callback) {">
			<outline text="fs.exists (f, function (flExists) {">
				<outline text="if (flExists) {">
					<outline text="fs.readFile (f, function (err, data) {">
						<outline text="if (err) {">
							<outline text="console.log (&quot;readStats: error reading file &quot; + f + &quot; == &quot; + err.message)"></outline>
							<outline text="if (callback != undefined) {">
								<outline text="callback ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline created="Tue, 11 Jun 2013 13:43:44 GMT" pgfnum="25734" text="var storedStats = JSON.parse (data.toString ());"></outline>
							<outline text="for (var x in storedStats) {">
								<outline text="stats [x] = storedStats [x];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="writeStats (f, stats, function () {">
								<outline text="if (callback != undefined) {">
									<outline text="callback ();"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="});"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="writeStats (f, stats, function () {">
						<outline text="if (callback != undefined) {">
							<outline text="callback ();"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function saveRenderedPage (host, lowerpath, htmltext) {">
			<outline text="var f;"></outline>
			<outline text="if (utils.endsWith (lowerpath, &quot;/&quot;)) {">
				<outline text="lowerpath += &quot;index.html&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="f = renderedPagesFolder + utils.stringLower (host) + lowerpath;"></outline>
			<outline text="fsSureFilePath (f, function () {">
				<outline text="fs.exists (f, function (flExists) {">
					<outline text="if (!flExists) {">
						<outline text="fs.writeFile (f, htmltext, function (err) {">
							<outline text="if (err) {">
								<outline text="console.log (&quot;saveRenderedPage: error == &quot; + err.message + &quot;, f == &quot; + f);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function debugNode (theNode) {">
			<outline text="var attstext = &quot;&quot;;"></outline>
			<outline text="for (var x in theNode) {">
				<outline text="if ((x != &quot;subs&quot;) &amp;&amp; (x != &quot;parent&quot;) &amp;&amp; (x != &quot;created&quot;)) {">
					<outline text="if (attstext.length &gt; 0) {">
						<outline text="attstext +=  &quot;, &quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="attstext += x + &quot;=&quot; + theNode [x];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (attstext);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getNodeType (theNode) {">
			<outline text="if (theNode.type == &quot;include&quot;) {">
				<outline text="return (theNode.includetype); //this allows include nodes to have types"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="return (theNode.type);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function outlineToText (theOutline, flIncludeAtts) { ">
			<outline isComment="true" text="Changes">
				<outline text="5/16/15; 10:29:12 AM by DW">
					<outline text="Pretty-print the text of the outline, including attributes. Useful for debugging."></outline>
					</outline>
				</outline>
			<outline text="var theText = &quot;&quot;, indentlevel = 0; "></outline>
			<outline text="if (flIncludeAtts === undefined) {">
				<outline text="flIncludeAtts = true;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function visitSubs (theNode) {">
				<outline text="if (theNode.subs != undefined) {">
					<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {">
						<outline text="var sub = theNode.subs [i], attstext = &quot;&quot;, linetext;"></outline>
						<outline text="if (flIncludeAtts) {">
							<outline text="for (var x in sub) {">
								<outline text="if ((x != &quot;subs&quot;) &amp;&amp; (x != &quot;text&quot;) &amp;&amp; (x != &quot;parent&quot;) &amp;&amp; (x != &quot;created&quot;)) {">
									<outline text="if (attstext.length &gt; 0) {">
										<outline text="attstext +=  &quot;, &quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="attstext += x + &quot;=&quot; + sub [x];"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (attstext.length &gt; 0) {">
								<outline text="attstext = &quot; (&quot; + attstext + &quot;)&quot;;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="//set linetext">
							<outline text="var linetext = sub.text;"></outline>
							<outline text="if (linetext.length &gt; 50) {">
								<outline text="linetext = utils.stringMid (linetext, 1, 50) + &quot;...&quot;;"></outline>
								<outline text="}"></outline>
								</outline>
							</outline>
						<outline text="theText += utils.filledString (&quot;\t&quot;, indentlevel) + linetext + attstext + &quot;\n&quot;;"></outline>
						<outline text="indentlevel++;"></outline>
						<outline text="visitSubs (sub);"></outline>
						<outline text="indentlevel--;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="visitSubs (theOutline);"></outline>
			<outline text="return (theText);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function outlineToJstruct (theOutline) { //7/9/15 by DW">
			<outline isComment="true" text="Changes">
				<outline text="7/9/15; 1:21:47 PM by DW">
					<outline text="We have to copy the struct because it has pointers in it that JSON.stringify can't deal with. We create a structure that it accepts."></outline>
					</outline>
				</outline>
			<outline text="var theCopy = new Object ();"></outline>
			<outline text="function copySubs (sourcesubs, destsubs) {">
				<outline text="for (var i = 0; i &lt; sourcesubs.length; i++) {">
					<outline text="destsubs [i] = outlineToJstruct (sourcesubs [i]);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="utils.copyScalars (theOutline, theCopy);"></outline>
			<outline text="if (theOutline.subs !== undefined) {">
				<outline text="theCopy.subs = new Object ();"></outline>
				<outline text="copySubs (theOutline.subs, theCopy.subs)"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (theCopy);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function outlineToCode (theOutline, pagetable, flProcessOldMacros) {">
			<outline text="var jstext = &quot;&quot;, indentlevel = 0;"></outline>
			<outline text="function add (s) {">
				<outline text="jstext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function doLevel (head) {">
				<outline text="if (head.subs !== undefined) {">
					<outline text="for (var i = 0; i &lt; head.subs.length; i++) {">
						<outline text="var sub = head.subs [i];"></outline>
						<outline isComment="true" text="console.log (&quot;outlineToCode: sub.iscomment == &quot; + sub.iscomment);"></outline>
						<outline text="if (!utils.getBoolean (sub.iscomment)) { //opmlparser appears to unicase the names, so isComment becomes iscomment">
							<outline text="add (sub.text);"></outline>
							<outline text="if (sub.subs !== undefined) {">
								<outline text="indentlevel++;"></outline>
								<outline text="doLevel (sub);"></outline>
								<outline text="indentlevel--;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="doLevel (theOutline);"></outline>
			<outline text="if (pagetable !== undefined) {">
				<outline text="jstext = utils.multipleReplaceAll (jstext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flProcessOldMacros) {">
				<outline text="var oldmacros = new Object ();"></outline>
				<outline text="oldmacros.text = pagetable.text;"></outline>
				<outline isComment="true" text="oldmacros.systemstyles= '&lt;script src=&quot;http://fargo.io/code/jquery-1.9.1.min.js&quot;&gt;&lt;/script&gt;\n&lt;link href=&quot;http://fargo.io/code/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;\n&lt;script src=&quot;http://fargo.io/code/bootstrap.min.js&quot;&gt;&lt;/script&gt;;';"></outline>
				<outline text="oldmacros.systemstyles= '\t\t\t&lt;link href=&quot;http://static.scripting.com/github/bootstrap2/css/bootstrap.css&quot; rel=&quot;stylesheet&quot;&gt;\n\t\t\t&lt;link href=&quot;http://static.scripting.com/github/bootstrap2/css/prettify.css&quot; rel=&quot;stylesheet&quot;&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/jquery.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/prettify.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-transition.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-alert.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-modal.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-dropdown.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-scrollspy.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-tab.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-tooltip.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-popover.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-button.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-collapse.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-carousel.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/bootstrap-typeahead.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.scripting.com/github/bootstrap2/js/application.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;script src=&quot;http://static.opml.org/scripts.js&quot;&gt;&lt;/script&gt;\n\t\t\t&lt;link href=&quot;http://static.opml.org/styles.css&quot; rel=&quot;stylesheet&quot;&gt;\n\t\t\t';"></outline>
				<outline text="jstext = utils.multipleReplaceAll (jstext, oldmacros, false, &quot;&lt;&quot; + &quot;%&quot;, &quot;%&quot; + &quot;&gt;&quot;);"></outline>
				<outline text=""></outline>
				<outline isComment="true" text="console.log (&quot;outlineToCode: oldmacros == &quot; + jsonStringify (oldmacros));"></outline>
				<outline isComment="true" text="console.log (&quot;outlineToCode: pagetable == &quot; + jsonStringify (pagetable));"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (jstext);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function getNameAtt (theNode) {">
			<outline text="var nameatt = theNode.name;"></outline>
			<outline text="if (nameatt === undefined) {">
				<outline text="nameatt = utils.innerCaseName (theNode.text);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (nameatt);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function outlineToIndex (theOutline, callback) {">
			<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"></outline>
			<outline text="function add (s) {">
				<outline isComment="true" text="console.log (utils.filledString (&quot;\t&quot;, indentlevel) + s);"></outline>
				<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function inlevelcallback () {">
				<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++;"></outline>
				<outline text="return (true);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function outlevelcallback () {">
				<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function nodecallback (theNode, path) {">
				<outline text="if (typeIsDoc (theNode)) {">
					<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + path + &quot;\&quot;&gt;&quot; + theNode.text + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var type = getNodeType (theNode);"></outline>
					<outline text="switch (type) {">
						<outline text="case &quot;link&quot;:">
							<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + theNode.url + &quot;\&quot;&gt;&quot; + theNode.text + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="default:">
							<outline text="add (&quot;&lt;li&gt;&quot; + theNode.text + &quot;&lt;/li&gt;&quot;);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="opml.outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, function () {">
				<outline text="callback (htmltext);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function readOpmlWithCache (url, callback) { //7/19/16 by DW">
			<outline text="function copyOutline (theOutline) {">
				<outline text="var newOutline = new Object ();"></outline>
				<outline text="utils.copyScalars (theOutline, newOutline);"></outline>
				<outline text="if (theOutline.subs !== undefined) {">
					<outline text="newOutline.subs = new Array ();"></outline>
					<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
						<outline text="newOutline.subs [i] = copyOutline (theOutline.subs [i]);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (newOutline);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="var now = new Date ();"></outline>
			<outline text="if (outlineCache [url] !== undefined) {">
				<outline text="var item = outlineCache [url];"></outline>
				<outline text="if (utils.secondsSince (item.whenCached) &lt; maxCacheSecs) {">
					<outline text="item.ctAccesses++;"></outline>
					<outline text="console.log (&quot;readOpmlWithCache: using item from cache, url == &quot; + url + &quot;, item.ctAccesses == &quot; + item.ctAccesses);"></outline>
					<outline text="callback (copyOutline (item.theOutline));"></outline>
					<outline text="return;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="console.log (&quot;readOpmlWithCache: cache item expired, url == &quot; + url);"></outline>
					<outline text="delete outlineCache [url];"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="opml.readOpmlUrl (url, function (theOutline, err) {">
				<outline text="if (err) {">
					<outline text="callback (theOutline, err);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="console.log (&quot;readOpmlWithCache: adding item to cache, url == &quot; + url);"></outline>
					<outline text="outlineCache [url] = {">
						<outline text="theOutline: theOutline,"></outline>
						<outline text="ctAccesses: 0,"></outline>
						<outline text="whenCached: now"></outline>
						<outline text="};"></outline>
						</outline>
					<outline text="callback (theOutline);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function readInclude (theIncludeNode, callback) {">
			<outline text="console.log (&quot;readInclude: url == &quot; + theIncludeNode.url);"></outline>
			<outline text="readOpmlWithCache (theIncludeNode.url, function (theOutline, err) {">
				<outline text="if (err) {">
					<outline text="callback (undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (theOutline);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}, false);"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function typeIsDoc (theNode) {">
			<outline text="var type = getNodeType (theNode);"></outline>
			<outline created="Wed, 27 Nov 2013 19:18:41 GMT" pgfnum="32453" text="return ((type !== undefined) &amp;&amp; (type != &quot;include&quot;) &amp;&amp; (type != &quot;link&quot;) &amp;&amp; (type != &quot;tweet&quot;));"></outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function readOpml (urloutline, callback) { ">
			<outline text="if (outlineCache [urloutline] !== undefined) {">
				<outline text="if (callback !== undefined) {">
					<outline isComment="true" text="console.log (&quot;readOpml: serving from the cache, urloutline == &quot; + urloutline);"></outline>
					<outline text="callback (outlineCache [urloutline], undefined);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="var outlineArray = new Array ();"></outline>
				<outline text="var req = request (urloutline);"></outline>
				<outline text="var opmlparser = new opmlParser ();"></outline>
				<outline text="var metadata = undefined;"></outline>
				<outline text="flparseerror = false;"></outline>
				<outline text=""></outline>
				<outline text="req.on (&quot;response&quot;, function (res) {">
					<outline text="var stream = this;"></outline>
					<outline text="if (res.statusCode == 200) {">
						<outline text="stream.pipe (opmlparser);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="req.on (&quot;error&quot;, function (res) {">
					<outline text="console.log (&quot;readOpml: error reading outline. urloutline == &quot; + urloutline);"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback (undefined, res);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="opmlparser.on (&quot;error&quot;, function (error) {">
					<outline text="console.log (&quot;readOpml: opml parser error == &quot; + error.message);"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback (undefined, error);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="flparseerror = true;"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="opmlparser.on (&quot;readable&quot;, function () {">
					<outline text="var outline;"></outline>
					<outline text="while (outline = this.read ()) {">
						<outline text="var ix = Number (outline [&quot;#id&quot;]);"></outline>
						<outline text="outlineArray [ix] = outline;"></outline>
						<outline text="if (metadata === undefined) {">
							<outline text="metadata = this.meta;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline isComment="true" text="console.log (jsonStringify (this.meta));"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="opmlparser.on (&quot;end&quot;, function () {">
					<outline text="if (flparseerror) {">
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var theOutline = new Object ();"></outline>
					<outline text="theOutline.parent = undefined; //this is how you can tell you hit the top in a traversal to the summit"></outline>
					<outline text=""></outline>
					<outline text="//copy elements of the metadata object into the root of the outline">
						<outline text="function copyone (name) {">
							<outline text="var val = metadata [name];"></outline>
							<outline text="if ((val !== undefined) &amp;&amp; (val != null)) {">
								<outline isComment="true" text="console.log (&quot;theOutline.&quot; + name + &quot; == &quot; + val);"></outline>
								<outline text="theOutline [name] = val;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="copyone (&quot;title&quot;);"></outline>
						<outline text="copyone (&quot;datecreated&quot;);"></outline>
						<outline text="copyone (&quot;datemodified&quot;);"></outline>
						<outline text="copyone (&quot;ownername&quot;);"></outline>
						<outline text="copyone (&quot;owneremail&quot;);"></outline>
						<outline text="copyone (&quot;description&quot;);"></outline>
						</outline>
					<outline text=""></outline>
					<outline isComment="true" text="console.log (&quot;readOpml: outlineArray == &quot; + jsonStringify (outlineArray));"></outline>
					<outline text="for (var i = 0; i &lt; outlineArray.length; i++) {">
						<outline text="var obj = outlineArray [i];"></outline>
						<outline text="if (obj != null) {">
							<outline text="var idparent = obj [&quot;#parentid&quot;], parent;"></outline>
							<outline text="if (idparent == 0) {">
								<outline text="parent = theOutline;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="parent = outlineArray [idparent];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (parent.subs === undefined) {">
								<outline text="parent.subs = new Array ();"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="parent.subs [parent.subs.length] = obj;"></outline>
							<outline text="obj.parent = parent;"></outline>
							<outline text="delete obj [&quot;#id&quot;];"></outline>
							<outline text="delete obj [&quot;#parentid&quot;];"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="outlineCache [urloutline] = theOutline;"></outline>
					<outline text="if (callback != undefined) {">
						<outline text="callback (theOutline, undefined);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline isComment="true" text="old code">
						<outline text="for (var i = 0; i &lt; outlineArray.length; i++) {">
							<outline text="var obj = outlineArray [i];"></outline>
							<outline text="if (obj) {">
								<outline text="var idparent = obj [&quot;#parentid&quot;];"></outline>
								<outline text="if (idparent) {">
									<outline text="var parent = outlineArray [idparent];"></outline>
									<outline text="if (parent.subs == undefined) {">
										<outline text="parent.subs = new Array ();"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="parent.subs [parent.subs.length] = obj;"></outline>
									<outline text="obj.parent = parent;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="delete obj [&quot;#id&quot;];"></outline>
								<outline text="delete obj [&quot;#parentid&quot;];"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (callback != undefined) {">
							<outline text="callback (outlineArray [1]);"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, visitcompletecallback) {">
			<outline text="function doLevel (head, path, levelcompletecallback) {">
				<outline text="function doOneSub (head, ixsub) {">
					<outline text="if ((head.subs !== undefined) &amp;&amp; (ixsub &lt; head.subs.length)) {">
						<outline text="var sub = head.subs [ixsub], subpath = path + getNameAtt (sub);"></outline>
						<outline text="if (!utils.getBoolean (sub.iscomment)) { ">
							<outline text="if ((sub.type == &quot;include&quot;) &amp;&amp; (!typeIsDoc (sub))) {">
								<outline text="nodecallback (sub, subpath);"></outline>
								<outline text="readInclude (sub, function (theIncludedOutline) {">
									<outline text="if (theIncludedOutline !== undefined) {">
										<outline text="doLevel (theIncludedOutline, subpath + &quot;/&quot;, function () { ">
											<outline text="outlevelcallback ();"></outline>
											<outline text="doOneSub (head, ixsub +1);"></outline>
											<outline text="});"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="if (typeIsDoc (sub)) {">
									<outline text="if (sub.type == &quot;index&quot;) {">
										<outline text="subpath += &quot;/&quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="nodecallback (sub, subpath);"></outline>
									<outline text="doOneSub (head, ixsub +1);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="nodecallback (sub, subpath);"></outline>
									<outline text="if (sub.subs !== undefined) {">
										<outline text="doLevel (sub, subpath + &quot;/&quot;, function () { ">
											<outline text="outlevelcallback ();"></outline>
											<outline text="doOneSub (head, ixsub +1);"></outline>
											<outline text="});"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="doOneSub (head, ixsub +1);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="else {">
							<outline text="doOneSub (head, ixsub +1);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="levelcompletecallback ();"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="inlevelcallback ();"></outline>
				<outline text="if (head.type == &quot;include&quot;) {">
					<outline text="readInclude (head, function (theIncludedOutline) {">
						<outline text="if (theIncludedOutline !== undefined) {">
							<outline text="doOneSub (theIncludedOutline, 0);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="doOneSub (head, 0);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="doLevel (theOutline, &quot;&quot;, function () {">
				<outline text="outlevelcallback ();"></outline>
				<outline text="visitcompletecallback ();"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline isComment="true" text="function expandIncludes (theOutline, callback) {">
			<outline isComment="true" text="Changes">
				<outline text="5/18/15; 8:41:21 PM by DW">
					<outline text="Visit the outline, building a new outline, with all the include nodes expanded."></outline>
					</outline>
				</outline>
			<outline text="var theNewOutline = new Object (), lastNewNode = theNewOutline, stack = new Array (), currentOutline;"></outline>
			<outline text="function inlevelcallback () {">
				<outline text="stack [stack.length] = currentOutline;"></outline>
				<outline text="currentOutline = lastNewNode;"></outline>
				<outline text="if (currentOutline.subs === undefined) {">
					<outline text="currentOutline.subs = new Array ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function nodecallback (theNode, path) {">
				<outline text="var newNode = new Object ();"></outline>
				<outline text="utils.copyScalars (theNode, newNode);"></outline>
				<outline text="currentOutline.subs [currentOutline.subs.length] = newNode;"></outline>
				<outline text="lastNewNode = newNode;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function outlevelcallback () {">
				<outline text="currentOutline = stack [stack.length - 1];"></outline>
				<outline text="stack.length--; //pop the stack"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="outlineVisiter (theOutline, inlevelcallback, outlevelcallback, nodecallback, function () {">
				<outline text="callback (theNewOutline);"></outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035" text="function httpReadUrl (url, callback) {">
			<outline text="request (url, function (error, response, body) {">
				<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
					<outline text="callback (body) "></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038" text="}"></outline>
			</outline>
		<outline created="Wed, 05 Mar 2014 17:39:32 GMT" pgfnum="38453" text="function getIcon (idnum, flcollapsed) {">
			<outline text="var wedgedir, color;"></outline>
			<outline text="if (flcollapsed) {">
				<outline text="wedgedir = &quot;right&quot;;"></outline>
				<outline text="color = &quot;black&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="wedgedir = &quot;down&quot;;"></outline>
				<outline text="color = &quot;silver&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline created="Wed, 05 Mar 2014 16:05:43 GMT" pgfnum="38439" text="var clickscript = &quot;onclick=\&quot;ecOutline (&quot; + idnum + &quot;)\&quot; &quot;;"></outline>
			<outline created="Sat, 21 Dec 2013 17:55:54 GMT" pgfnum="34072" text="var icon = &quot;&lt;span class=\&quot;spOutlineIcon\&quot;&gt;&lt;a class=\&quot;aOutlineWedgeLink\&quot; &quot; + clickscript + &quot;&gt;&lt;i class=\&quot;fa fa-caret-&quot; + wedgedir + &quot;\&quot; style=\&quot;color: &quot; + color + &quot;;\&quot; id=\&quot;idOutlineWedge&quot; + idnum + &quot;\&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/span&gt;&quot;;"></outline>
			<outline created="Wed, 05 Mar 2014 17:40:15 GMT" pgfnum="38455" text="return (icon);"></outline>
			<outline created="Wed, 05 Mar 2014 17:39:41 GMT" pgfnum="38454" text="}"></outline>
			</outline>
		<outline created="Sat, 08 Mar 2014 23:26:03 GMT" pgfnum="38697" text="function expandableTextLink (theText, idLevel) {">
			<outline created="Fri, 07 Mar 2014 23:39:20 GMT" pgfnum="38616" text="return (&quot;&lt;a class=\&quot;aOutlineTextLink\&quot; onclick=\&quot;ecOutline (&quot; + idLevel + &quot;)\&quot;&gt;&quot; + theText + &quot;&lt;/a&gt;&quot;);"></outline>
			<outline created="Sat, 08 Mar 2014 23:26:16 GMT" pgfnum="38698" text="}"></outline>
			</outline>
		<outline text="function riverGetPermalinkString (urlPermalink, permalinkString) {">
			<outline text="if (urlPermalink == undefined) {">
				<outline text="return (&quot;&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (permalinkString == undefined) { ">
				<outline text="permalinkString = &quot;#&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="return (&quot;&lt;div class=\&quot;divOutlinePermalink\&quot;&gt;&lt;a href=\&quot;&quot; + urlPermalink + &quot;\&quot;&gt;&quot; + permalinkString + &quot;&lt;/a&gt;&lt;/div&gt;&quot;);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function riverRenderOutline (outline, flMarkdown, urlPermalink, permalinkString, flExpanded) {">
			<outline isComment="true" text="Changes">
				<outline text="5/20/15; 10:40:27 AM by DW">
					<outline text="Add linking from childless nodes."></outline>
					</outline>
				<outline text="5/19/15; 10:15:55 AM by DW">
					<outline text="Added outlinelevel variable to track the level of the outline, using it to add a class to the &lt;ul&gt; elements that make up the outline."></outline>
					</outline>
				<outline text="5/7/15; 8:35:53 AM by DW">
					<outline text="Cribbed from riverBrowser.js. Changes noted below.">
						<outline text="We use the marked package to render Markdown text instead of Markdown.Converter."></outline>
						<outline text="getHotText just returns the text, it does no processing."></outline>
						</outline>
					</outline>
				<outline text="5/2/15; 10:40:34 AM by DW">
					<outline text="Ignore commented lines."></outline>
					</outline>
				<outline text="4/28/15; 11:34:03 AM by DW">
					<outline text="Outlines now understand the &quot;img&quot; att, it adds the image to the text, floating in the right edge of the text."></outline>
					</outline>
				<outline text="10/23/14; 10:02:46 AM by DW">
					<outline text="New optional params, permalinkString, flExpanded."></outline>
					</outline>
				<outline text="10/22/14; 12:10:27 PM by DW">
					<outline text="New optional param, urlPermalink. If specified, we use that address for the permalink to this outline."></outline>
					</outline>
				<outline text="10/16/14; 2:17:19 PM by DW">
					<outline text="Add a div around the subs of a non-Markdown outline, divOutlineSubs, so some styles can apply to those outlines, but not the Markdown outlines. Without this, Markdown lists would be rendered without their numbers. "></outline>
					</outline>
				<outline text="10/15/14; 2:01:59 PM by DW">
					<outline text="New optional param, flMarkdown. "></outline>
					</outline>
				</outline>
			<outline text="var htmltext = &quot;&quot;, indentlevel = 0, permalink = riverGetPermalinkString (urlPermalink, permalinkString), outlinelevel = 0;"></outline>
			<outline isComment="true" text="var markdown = new Markdown.Converter ();"></outline>
			<outline text="if (flMarkdown === undefined) {">
				<outline text="flMarkdown = false;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (flExpanded === undefined) { //10/23/14 by DW">
				<outline text="flExpanded = riverConfig.flOutlinesExpandedByDefault; //4/16/15 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline isComment="true" text="if (permalinkString == undefined) { //10/23/14 by DW">
				<outline text="permalinkString = &quot;#&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function add (s) {">
				<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\r\n&quot;;"></outline>
				<outline created="Tue, 17 Dec 2013 21:02:18 GMT" pgfnum="33817" text="}"></outline>
				</outline>
			<outline text="function getHotText (outline) {">
				<outline text="var origtext = outline.text;"></outline>
				<outline text="return (expandableTextLink (origtext, serialnumForRiverRender)); //5/7/15 by DW"></outline>
				<outline isComment="true" text=""></outline>
				<outline isComment="true" text="var s = hotUpText (outline.text, outline.url);"></outline>
				<outline isComment="true" text="if (s != origtext) {">
					<outline text="return (s);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text="else {">
					<outline text="if (utils.getBoolean (outline.bold)) { //12/6/14 by DW">
						<outline text="s = &quot;&lt;span class=\&quot;spBoldHead\&quot;&gt;&quot; + s + &quot;&lt;/span&gt;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="return (expandableTextLink (s, serialnumForRiverRender));"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function hasSubs (outline) {">
				<outline text="return (outline.subs != undefined) &amp;&amp; (outline.subs.length &gt; 0);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getImgHtml (imgatt) { //4/28/15 by DW">
				<outline text="if (imgatt === undefined) {">
					<outline text="return (&quot;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="return (&quot;&lt;img style=\&quot;float: right; margin-left: 24px; margin-top: 14px; margin-right: 14px; margin-bottom: 14px;\&quot; src=\&quot;&quot; + imgatt +&quot;\&quot;&gt;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function gatherStylesFromOutline (outline) { //11/5/14 by DW">
				<outline text="var atts = new Object (), styles = new Object ();"></outline>
				<outline text="for (var x in outline) {">
					<outline text="switch (x) {">
						<outline text="case &quot;color&quot;:"></outline>
						<outline text="case &quot;direction&quot;:"></outline>
						<outline text="case &quot;font-family&quot;:"></outline>
						<outline text="case &quot;font-size&quot;:"></outline>
						<outline text="case &quot;font-weight&quot;:"></outline>
						<outline text="case &quot;letter-spacing&quot;:"></outline>
						<outline text="case &quot;line-height&quot;:"></outline>
						<outline text="case &quot;margin-left&quot;:"></outline>
						<outline text="case &quot;text-decoration&quot;:"></outline>
						<outline text="case &quot;text-shadow&quot;:"></outline>
						<outline text="case &quot;text-transform&quot;:"></outline>
						<outline text="case &quot;white-space&quot;:"></outline>
						<outline text="case &quot;word-spacing&quot;:">
							<outline text="styles [x] = outline [x];"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (styles);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getStylesString (outline, flcollapsed) { //11/7/14 by DW">
				<outline text="var styles = gatherStylesFromOutline (outline), style = &quot;&quot;;"></outline>
				<outline text="if (flcollapsed) {">
					<outline text="styles.display = &quot;none&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for (var x in styles) {">
					<outline text="style += x + &quot;: &quot; + styles [x] + &quot;; &quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (style.length &gt; 0) {">
					<outline text="style = &quot; style=\&quot;&quot; + style + &quot;\&quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (style);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getSubsMarkdownText (outline) {">
				<outline isComment="true" text="Changes">
					<outline text="4/28/15; 11:29:22 AM by DW">
						<outline text="Factored out the img-generating code so we can use it in outlines."></outline>
						</outline>
					<outline text="11/8/14; 1:41:03 PM by DW">
						<outline text="I added support for styles on outline levels in Markdown, but putting &lt;div&gt;s in the middle of the text causes Markdown to shut off. If that's what you want, add an flMarkdown att with the value of false."></outline>
						</outline>
					<outline text="10/21/14; 5:06:52 PM by DW">
						<outline text="Adding one \r wasn't enough. We add two."></outline>
						</outline>
					</outline>
				<outline text="var s = &quot;&quot;, style = getStylesString (outline, false);"></outline>
				<outline isComment="true" text="if (style.length &gt; 0) {">
					<outline text="s += &quot;&lt;div &quot; + style + &quot;&gt;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="for (var i = 0; i &lt; outline.subs.length; i++) {">
					<outline text="var child = outline.subs [i], img = &quot;&quot;, imgatt = $(child).attr (&quot;img&quot;);"></outline>
					<outline isComment="true" text="if (imgatt != undefined) {">
						<outline text="img = &quot;&lt;img style=\&quot;float: right; margin-left: 25px; margin-top: 15px; margin-right: 15px; margin-bottom: 15px;\&quot; src=\&quot;&quot; + imgatt +&quot;\&quot;&gt;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="if (!utils.getBoolean (child.isComment)) { //5/2/15 by DW">
						<outline text="s += getImgHtml (imgatt) + child.text + &quot;\r\r&quot;;"></outline>
						<outline text="if (hasSubs (child)) {">
							<outline text="s += getSubsMarkdownText (child);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text=""></outline>
					<outline text="}"></outline>
					</outline>
				<outline isComment="true" text="if (style.length &gt; 0) {">
					<outline text="s += &quot;&lt;/div&gt;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function addChildlessSub (theNode, path) { //5/20/15 by DW">
				<outline text="if (typeIsDoc (theNode)) {">
					<outline text="add (&quot;&lt;li&gt;&lt;div class=\&quot;divOutlineText\&quot;&gt;&lt;a href=\&quot;&quot; + path + &quot;\&quot;&gt;&quot; + theNode.text + &quot;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var type = getNodeType (theNode);"></outline>
					<outline text="switch (type) {">
						<outline text="case &quot;link&quot;:">
							<outline text="add (&quot;&lt;li&gt;&lt;div class=\&quot;divOutlineText\&quot;&gt;&lt;a href=\&quot;&quot; + theNode.url + &quot;\&quot;&gt;&quot; + theNode.text + &quot;&lt;/a&gt;&lt;/div&gt;&lt;/li&gt;&quot;);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="default:">
							<outline text="add (&quot;&lt;li&gt;&lt;div class=\&quot;divOutlineText\&quot;&gt;&quot; + theNode.text + &quot;&lt;/div&gt;&lt;/li&gt;&quot;);"></outline>
							<outline text="break;"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function addSubs (outline, flcollapsed, path) {">
				<outline isComment="true" text="Changes">
					<outline text="5/28/15; 10:37:23 AM by DW">
						<outline text="Don't pass through &lt;rule headlines."></outline>
						</outline>
					<outline text="5/20/15; 10:19:12 AM by DW">
						<outline text="Added path param."></outline>
						</outline>
					<outline text="12/7/14; 2:06:31 PM by DW">
						<outline text="If there's a collapse att on a child, use it to determine if the child is expanded or collapsed. The default is expanded."></outline>
						</outline>
					</outline>
				<outline text="if (hasSubs (outline)) {">
					<outline text="var style = getStylesString (outline, flcollapsed);"></outline>
					<outline text="add (&quot;&lt;ul class=\&quot;ulOutlineList ulLevel&quot; + outlinelevel + &quot;\&quot; id=\&quot;idOutlineLevel&quot; + serialnumForRiverRender++ + &quot;\&quot;&quot; + style + &quot;&gt;&quot;); indentlevel++; outlinelevel++;"></outline>
					<outline text="for (var i = 0; i &lt; outline.subs.length; i++) {">
						<outline text="var child = outline.subs [i], flchildcollapsed = utils.getBoolean (child.collapse), img = getImgHtml (child.img);"></outline>
						<outline text="if (!utils.beginsWith (child.text, &quot;&lt;rule&quot;)) { //5/28/15 by DW">
							<outline text="if (!utils.getBoolean (child.isComment)) { //5/2/15 by DW">
								<outline text="var childpath = path + getNameAtt (child); //5/20/15 by DW"></outline>
								<outline text="if (hasSubs (child)) {">
									<outline text="add (&quot;&lt;li&gt;&quot;); indentlevel++;"></outline>
									<outline text="add (&quot;&lt;div class=\&quot;divOutlineText\&quot;&gt;&quot; + getIcon (serialnumForRiverRender, flchildcollapsed) + img + getHotText (child) + &quot;&lt;/div&gt;&quot;);"></outline>
									<outline text="addSubs (child, flchildcollapsed, childpath + &quot;/&quot;);"></outline>
									<outline text="add (&quot;&lt;/li&gt;&quot;); indentlevel--;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="addChildlessSub (child, childpath);"></outline>
									<outline isComment="true" text="add (&quot;&lt;li&gt;&lt;div class=\&quot;divOutlineText\&quot;&gt;&quot; + img + child.text + &quot;&lt;/div&gt;&lt;/li&gt;&quot;);xxx"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="}"></outline>
						</outline>
					<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--; outlinelevel--;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline isComment="true" text="if (urlPermalink != undefined) { //10/22/14 by DW">
				<outline text="permalink = &quot;&lt;div class=\&quot;divOutlinePermalink\&quot;&gt;&lt;a href=\&quot;&quot; + urlPermalink + &quot;\&quot;&gt;&quot; + permalinkString + &quot;&lt;/a&gt;&lt;/div&gt;&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="if (hasSubs (outline)) { //9/22/14 by DW">
				<outline text="var flTopLevelCollapsed = !flExpanded, theText = getHotText (outline);"></outline>
				<outline text="add (&quot;&lt;div class=\&quot;divRenderedOutline\&quot;&gt;&quot;); indentlevel++;"></outline>
				<outline text="add (&quot;&lt;div class=\&quot;divItemHeader divOutlineHead divOutlineHeadHasSubs\&quot;&gt;&quot; + getIcon (serialnumForRiverRender, flTopLevelCollapsed) + theText + permalink + &quot;&lt;/div&gt;&quot;);"></outline>
				<outline text=""></outline>
				<outline text="if (flMarkdown) {">
					<outline text="var markdowntext = getSubsMarkdownText (outline), style = &quot;&quot;;"></outline>
					<outline isComment="true" text="console.log (&quot;riverRenderOutline: markdowntext == &quot; + markdowntext);"></outline>
					<outline text="if (flTopLevelCollapsed) { //10/23/14 by DW">
						<outline text="style = &quot; style=\&quot;display: none;\&quot;&quot;;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="var opendiv = &quot;&lt;div class=\&quot;divMarkdownSubs\&quot; id=\&quot;idOutlineLevel&quot; + serialnumForRiverRender++ + &quot;\&quot; &quot; + style + &quot;&gt;&quot;;"></outline>
					<outline text="add (opendiv + marked (markdowntext) + &quot;&lt;/div&gt;&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="add (&quot;&lt;div class=\&quot;divOutlineSubs\&quot;&gt;&quot;); indentlevel++;"></outline>
					<outline text="addSubs (outline, flTopLevelCollapsed, &quot;&quot;);"></outline>
					<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"></outline>
				<outline text=""></outline>
				<outline text="serialnumForRiverRender++; //9/22/14 by DW"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="else {">
				<outline text="add (&quot;&lt;div class=\&quot;divRenderedOutline\&quot;&gt;&quot;); indentlevel++;"></outline>
				<outline text="add (&quot;&lt;div class=\&quot;divItemHeader divOutlineHead\&quot;&gt;&quot; + utils.hotUpText (outline.text, outline.url) + permalink + &quot;&lt;/div&gt;&quot;);"></outline>
				<outline text="add (&quot;&lt;/div&gt;&quot;); indentlevel--;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="return (htmltext);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function renderThumblist (theOutline) {">
			<outline text="var htmltext = &quot;&quot;, indentlevel = 0, ctinrow = 0, maxinrow = 4, flnewrow = true, created, datestring, colwidth, caption, image, tw;"></outline>
			<outline text="function add (s) {">
				<outline isComment="true" text="console.log (utils.filledString (&quot;\t&quot;, indentlevel) + s);"></outline>
				<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="add (&quot;&lt;table&gt;&quot;); indentlevel++;"></outline>
			<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
				<outline text="var theNode = theOutline.subs [i];"></outline>
				<outline text="if (flnewrow) {">
					<outline text="add (&quot;&lt;tr&gt;&quot;); indentlevel++;"></outline>
					<outline text="flnewrow = false;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="//set datestring">
					<outline text="created = new Date (theNode.created);"></outline>
					<outline text="datestring = (created.getMonth () + 1) + &quot;/&quot; + created.getDate ();"></outline>
					</outline>
				<outline text="//set colwidth">
					<outline text="tw = Number (theNode.thumbwidth);"></outline>
					<outline text="colwidth = tw + ((2 * tw) / 3);"></outline>
					</outline>
				<outline text="//set caption">
					<outline text="caption = &quot;&lt;div class=\&quot;thumbListCaptionString\&quot;&gt;&quot; + datestring + &quot;: &quot; + theNode.text + &quot;&lt;/div&gt;&quot;;"></outline>
					</outline>
				<outline text="//set image">
					<outline text="image = &quot;&lt;a href=\&quot;&quot; + utils.innerCaseName (theNode.text) + &quot;\&quot;&gt;&lt;img src=\&quot;&quot; + theNode.thumburl + &quot;\&quot; width=\&quot;&quot; + theNode.thumbwidth + &quot;\&quot; height=\&quot;&quot; + theNode.thumbheight + &quot;\&quot; alt=\&quot;&quot; + theNode.text + &quot;\&quot; border=\&quot;0\&quot;&gt;&lt;/a&gt;&quot;"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="add (&quot;&lt;td width=\&quot;&quot; + colwidth + &quot;\&quot;&gt;&quot; + image + caption + &quot;&lt;/td&gt;&quot;);"></outline>
				<outline text="ctinrow++;"></outline>
				<outline text="if (ctinrow &gt;= maxinrow) {">
					<outline text="add (&quot;&lt;/tr&gt;&quot;); indentlevel--;"></outline>
					<outline text="ctinrow = 0;"></outline>
					<outline text="flnewrow = true;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="if (ctinrow &gt; 0) {">
				<outline text="add (&quot;&lt;/tr&gt;&quot;); indentlevel--;"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="add (&quot;&lt;/table&gt;&quot;); indentlevel--;"></outline>
			<outline text="return (htmltext);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function findDomain (theOutline, domain, callback) {">
			<outline text="var lowerdomain = utils.stringLower (domain), flfound = false;"></outline>
			<outline text="function findin (theNode) {">
				<outline text="if (theNode.domain !== undefined) {">
					<outline text="if (utils.stringLower (theNode.domain) == lowerdomain) {">
						<outline text="callback (theNode);"></outline>
						<outline text="flfound = true;"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (theNode.subs !== undefined) {">
					<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {">
						<outline text="findin (theNode.subs [i]);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="findin (theOutline);"></outline>
			<outline text="if (!flfound) {">
				<outline text="callback (theOutline);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function buildDomainsTable (callback) {">
			<outline text="var domains = new Object ();"></outline>
			<outline text="function doNext (ixnext) {">
				<outline text="if (ixnext &lt; appConfig.roots.length) {">
					<outline text="var urlOutline = appConfig.roots [ixnext].url;"></outline>
					<outline text="console.log (&quot;buildDomainsTable: urlOutline == &quot; + urlOutline);"></outline>
					<outline text="opml.readOpmlUrl (urlOutline, function (theOutline) {">
						<outline text="function visitNode (theNode) {">
							<outline text="if (theNode.domain !== undefined) {">
								<outline text="domains [theNode.domain] = urlOutline;"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if ((theNode.type === undefined) || (theNode.type != &quot;include&quot;)) {">
								<outline text="if (theNode.subs !== undefined) {">
									<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {">
										<outline text="visitNode (theNode.subs [i]);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="visitNode (theOutline);"></outline>
						<outline text="doNext (ixnext + 1);"></outline>
						<outline text="}, false);"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="if (callback !== undefined) {">
						<outline text="globalDomains = domains;"></outline>
						<outline text="callback (domains);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="doNext (0);"></outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function get404page (callback) {">
			<outline isComment="true" text=""></outline>
			<outline isComment="true" text="console.trace (&quot;get404page trace&quot;);"></outline>
			<outline isComment="true" text=""></outline>
			<outline text="request (appConfig.url404Page, function (error, response, body) {">
				<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
					<outline text="callback (body, &quot;text/html&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="callback (&quot;Not found.&quot;, &quot;text/plain&quot;);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function isNameAvailable (theName) {">
			<outline text=""></outline>
			<outline text="return (&quot;isNameAvailable: theName == &quot; + theName);"></outline>
			<outline text=""></outline>
			<outline created="Thu, 23 Jan 2014 21:18:25 GMT" pgfnum="36474" text="function sendStringBack (s) {">
				<outline created="Tue, 21 Jan 2014 14:40:41 GMT" pgfnum="36093" text="var x = {&quot;message&quot;: s};"></outline>
				<outline created="Tue, 11 Feb 2014 18:24:36 GMT" pgfnum="37436" text="statsAddToHttpLog (httpRequest, undefined, undefined, now); "></outline>
				<outline text="httpResponse.end (&quot;getData (&quot; + JSON.stringify (x) + &quot;)&quot;);    "></outline>
				<outline created="Thu, 23 Jan 2014 21:18:45 GMT" pgfnum="36475" text="}"></outline>
				</outline>
			<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;application/json&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;fargo.io&quot;});"></outline>
			<outline created="Wed, 22 Jan 2014 03:22:42 GMT" pgfnum="36234" text="var name = cleanName (parsedUrl.query.name);"></outline>
			<outline created="Wed, 22 Jan 2014 03:23:26 GMT" pgfnum="36238" text="if (name.length == 0) {">
				<outline text="sendStringBack (&quot;&quot;);    "></outline>
				<outline created="Wed, 22 Jan 2014 03:23:31 GMT" pgfnum="36239" text="}"></outline>
				</outline>
			<outline created="Wed, 22 Jan 2014 03:24:27 GMT" pgfnum="36242" text="else {">
				<outline text="if (name.length &lt; 4) {">
					<outline text="sendStringBack (&quot;Name must be 4 or more characters.&quot;);"></outline>
					<outline created="Wed, 22 Jan 2014 03:24:22 GMT" pgfnum="36241" text="}"></outline>
					</outline>
				<outline created="Wed, 22 Jan 2014 03:24:49 GMT" pgfnum="36244" text="else {">
					<outline created="Wed, 22 Jan 2014 03:21:13 GMT" pgfnum="36231" text="isNameDefined (name, function (fldefined) {">
						<outline created="Wed, 22 Jan 2014 03:27:42 GMT" pgfnum="36249" text="var color, answer;"></outline>
						<outline created="Wed, 22 Jan 2014 03:22:09 GMT" pgfnum="36233" text="if (fldefined) {">
							<outline created="Wed, 22 Jan 2014 03:28:18 GMT" pgfnum="36250" text="color = &quot;red&quot;;"></outline>
							<outline created="Wed, 22 Jan 2014 03:28:22 GMT" pgfnum="36251" text="answer = &quot;is not&quot;;"></outline>
							<outline created="Wed, 22 Jan 2014 03:27:13 GMT" pgfnum="36246" text="}"></outline>
							</outline>
						<outline created="Wed, 22 Jan 2014 03:27:17 GMT" pgfnum="36247" text="else {">
							<outline created="Wed, 22 Jan 2014 03:28:18 GMT" pgfnum="36250" text="color = &quot;green&quot;;"></outline>
							<outline created="Wed, 22 Jan 2014 03:28:22 GMT" pgfnum="36251" text="answer = &quot;is&quot;;"></outline>
							<outline created="Wed, 22 Jan 2014 03:27:19 GMT" pgfnum="36248" text="}"></outline>
							</outline>
						<outline text="sendStringBack (&quot;&lt;span style=\&quot;color: &quot; + color + &quot;;\&quot;&gt;&quot; + name + &quot;.&quot; + myDomain + &quot; &quot; + answer + &quot; available.&lt;/span&gt;&quot;)"></outline>
						<outline created="Wed, 22 Jan 2014 03:21:49 GMT" pgfnum="36232" text="});"></outline>
						</outline>
					<outline created="Wed, 22 Jan 2014 03:24:51 GMT" pgfnum="36245" text="}"></outline>
					</outline>
				<outline created="Wed, 22 Jan 2014 03:24:33 GMT" pgfnum="36243" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function handleSystemRequest (lowerpath, parsedUrl, callback) {">
			<outline isComment="true" text="console.log (&quot;handleSystemRequest: lowerpath == &quot; + lowerpath);"></outline>
			<outline text="switch (lowerpath) {">
				<outline created="Wed, 22 Jan 2014 15:18:23 GMT" pgfnum="36265" text="case &quot;/version&quot;:">
					<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, myVersion);"></outline>
					<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
					</outline>
				<outline created="Sat, 08 Feb 2014 16:43:58 GMT" pgfnum="37236" text="case &quot;/now&quot;:">
					<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, new Date ().toString ());"></outline>
					<outline created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266" text="break;"></outline>
					</outline>
				<outline text="case &quot;/loaddomains&quot;: //5/27/15 by DW">
					<outline text="buildDomainsTable (function (domains) {">
						<outline text="console.log (utils.jsonStringify (domains));    "></outline>
						<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, utils.jsonStringify (domains));"></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/favicon.ico&quot;:  //5/27/15 by DW">
					<outline text="callback (302, {&quot;location&quot;: appConfig.urlFavicon}, &quot;302 REDIRECT&quot;);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/robots.txt&quot;:  //5/27/15 by DW">
					<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, appConfig.robotsTxt);"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline text="case &quot;/stats.json&quot;:  //7/8/15 by DW">
					<outline text="callback (200, {&quot;Content-Type&quot;: &quot;application/json&quot;}, utils.jsonStringify (worldOutlineStats));"></outline>
					<outline text="break;"></outline>
					</outline>
				<outline created="Wed, 22 Jan 2014 03:19:48 GMT" pgfnum="36229" text="case &quot;/isnameavailable&quot;: //7/11/15 by DW">
					<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/html&quot;}, isNameAvailable (parsedUrl.query.name));"></outline>
					<outline created="Wed, 22 Jan 2014 03:19:54 GMT" pgfnum="36230" text="break;"></outline>
					</outline>
				<outline created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084" text="default: ">
					<outline text="get404page (function (s, type) {">
						<outline text="callback (404, {&quot;Content-Type&quot;: type}, s);"></outline>
						<outline text="});"></outline>
						</outline>
					<outline created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808" text="break;"></outline>
					</outline>
				<outline created="Mon, 03 Feb 2014 03:20:25 GMT" pgfnum="36830" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text=""></outline>
		<outline text="function worldOutline (urlOutline, domain, path, parsedUrl, callback) {">
			<outline text="var thisPageUrl;"></outline>
			<outline text=""></outline>
			<outline text="function outlineToOPML (theOutline, title) {">
				<outline text="var xmltext = &quot;&quot;, indentlevel = 0;"></outline>
				<outline text="function add (s) {">
					<outline created="Wed, 19 Jun 2013 18:22:33 GMT" pgfnum="26661" text="xmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="function dolevel (theNode) {">
					<outline text="var atts = &quot;&quot;;"></outline>
					<outline created="Sat, 09 Aug 2014 15:39:38 GMT" pgfnum="43186" text="for (var x in theNode) {">
						<outline text="if (x != &quot;subs&quot;) {">
							<outline created="Sat, 09 Aug 2014 15:40:19 GMT" pgfnum="43192" text="atts += &quot; &quot; + x + &quot;=\&quot;&quot; + utils.encodeXml (theNode [x]) + &quot;\&quot;&quot;;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline created="Sat, 09 Aug 2014 15:39:43 GMT" pgfnum="43187" text="}"></outline>
						</outline>
					<outline text="if (theNode.subs === undefined) {">
						<outline text="add (&quot;&lt;outline&quot; + atts + &quot; /&gt;&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="add (&quot;&lt;outline&quot; + atts + &quot; &gt;&quot;); indentlevel++;"></outline>
						<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {">
							<outline text="dolevel (theNode.subs [i]);"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="add (&quot;&lt;/outline&gt;&quot;); indentlevel--;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (title === undefined) {">
					<outline text="title = &quot;outline&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="add (&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;ISO-8859-1\&quot;?&gt;&quot;);"></outline>
				<outline text="add (&quot;&lt;opml version=\&quot;2.0\&quot;&gt;&quot;); indentlevel++;"></outline>
				<outline text="add (&quot;&lt;head&gt;&quot;); indentlevel++;"></outline>
				<outline text="add (&quot;&lt;title&gt;&quot; + utils.encodeXml (title) + &quot;&lt;/title&gt;&quot;);"></outline>
				<outline text="add (&quot;&lt;/head&gt;&quot;); indentlevel--;"></outline>
				<outline text="add (&quot;&lt;body&gt;&quot;); indentlevel++;"></outline>
				<outline text=""></outline>
				<outline text="dolevel (theOutline);"></outline>
				<outline text=""></outline>
				<outline text="add (&quot;&lt;/body&gt;&quot;); indentlevel--;"></outline>
				<outline text="add (&quot;&lt;/opml&gt;&quot;); indentlevel--;"></outline>
				<outline text="return (xmltext);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function return404 () {">
				<outline text=""></outline>
				<outline text="get404page (function (s, type) {">
					<outline text="callback (404, {&quot;Content-Type&quot;: type}, s);"></outline>
					<outline text="});"></outline>
					</outline>
				<outline text=""></outline>
				<outline isComment="true" text="request (appConfig.url404Page, function (error, response, body) {">
					<outline text="if (!error &amp;&amp; (response.statusCode == 200)) {">
						<outline text="callback (404, {&quot;Content-Type&quot;: &quot;text/html&quot;}, body);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="else {">
						<outline text="console.log (utils.jsonStringify (response));"></outline>
						<outline text="callback (404, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, &quot;Not found.&quot;);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function return500 (s) {">
				<outline text="callback (500, {&quot;Content-Type&quot;: &quot;text/plain&quot;}, s);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function returnRedirect (url) {">
				<outline text="callback (302, {&quot;location&quot;: url}, &quot;302 REDIRECT&quot;);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function returnHtml (htmltext) {">
				<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/html&quot;}, htmltext);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getTemplate (type) {">
				<outline text="var urlTemplate = appConfig.templates [type];"></outline>
				<outline text="if (urlTemplate === undefined) {">
					<outline text="urlTemplate = appConfig.templates.default;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (urlTemplate);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function getDisqusGroup (urlOutline) {">
				<outline text="for (var i = 0; i &lt; appConfig.roots.length; i++) {">
					<outline text="var theRoot = appConfig.roots [i];"></outline>
					<outline text="if (theRoot.url == urlOutline) {">
						<outline text="return (theRoot.disqusGroup);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="return (appConfig.disqusGroupname);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="//set thisPageUrl">
				<outline text="var thisPort;"></outline>
				<outline text="if (appConfig.port == 80) {">
					<outline text="thisPort = &quot;&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="thisPort = &quot;:&quot; + appConfig.port;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="var thisPageUrl = &quot;http://&quot; + domain + thisPort + path;"></outline>
				<outline isComment="true" text="console.log (&quot;worldOutline: thisPageUrl == &quot; + thisPageUrl);"></outline>
				</outline>
			<outline text=""></outline>
			<outline text="readOpmlWithCache (urlOutline, function (theOutline, err) { //7/19/16 by DW -- was opml.readOpmlUrl">
				<outline text="if (err) {">
					<outline text="return500 (err.message);"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="else {">
					<outline text="var theScalars = {}; //7/16/16 by DW -- debugging"></outline>
					<outline text="utils.copyScalars (theOutline, theScalars); //7/16/16 by DW -- debugging"></outline>
					<outline text="console.log (&quot;worldOutline: theScalars == &quot; + utils.jsonStringify (theScalars)); //7/16/16 by DW -- debugging"></outline>
					<outline text=""></outline>
					<outline text="var whenModified = theOutline.datemodified; //7/16/16 by DW"></outline>
					<outline text=""></outline>
					<outline text="findDomain (theOutline, domain, function (domainOutline) {">
						<outline text="var steps = utils.stringLower (path).split (&quot;/&quot;), theStep;"></outline>
						<outline text="var ixFirstStep = 0, ixLastStep = steps.length - 1, htmltext, pagetable = new Object ();"></outline>
						<outline text="function nextStep (ixstep, nomad, callback) {">
							<outline text="function loopOverSubs (nomad) {">
								<outline text="var subs = nomad.subs;"></outline>
								<outline text="if (subs === undefined) {">
									<outline isComment="true" text="console.log (&quot;fell off the tree at step == &quot; + theStep);"></outline>
									<outline text="callback (false);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="for (var j = 0; j &lt; subs.length; j++) {">
										<outline text="var sub = subs [j], nameatt = utils.stringLower (getNameAtt (sub));"></outline>
										<outline isComment="true" text="console.log (nameatt + &quot; == &quot; + theStep + &quot;?&quot;);"></outline>
										<outline text="if (nameatt == theStep) {">
											<outline text="nextStep (ixstep + 1, sub, callback);"></outline>
											<outline text="return;"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline isComment="true" text="console.log (&quot;fell off the tree at step == &quot; + theStep);"></outline>
									<outline text="callback (false);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="if (ixstep &lt;= ixLastStep) {">
								<outline text="var theStep = steps [ixstep];"></outline>
								<outline text="if ((nomad.type == &quot;include&quot;) || (nomad.type == &quot;thumbList&quot;)) {">
									<outline text="if (nomad.url !== undefined) {">
										<outline text="readInclude (nomad, function (theIncludedOutline) {">
											<outline text="if (theIncludedOutline !== undefined) {">
												<outline text="loopOverSubs (theIncludedOutline);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="});"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;include node with no url attribute at step == &quot; + theStep);"></outline>
										<outline text="callback (false);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="loopOverSubs (nomad);"></outline>
									<outline text=""></outline>
									<outline isComment="true" text="if (nomad.subs === undefined) {">
										<outline text="console.log (&quot;fell off the tree at step == &quot; + theStep);"></outline>
										<outline text="callback (false);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline isComment="true" text="else {">
										<outline isComment="true" text="for (var j = 0; j &lt; nomad.subs.length; j++) {">
											<outline text="var sub = nomad.subs [j], nameatt = utils.stringLower (getNameAtt (sub));"></outline>
											<outline text="if (nameatt == theStep) {">
												<outline text="nextStep (ixstep + 1, sub, callback);"></outline>
												<outline text="break;"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="callback (true, nomad);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (steps [0].length == 0) {">
							<outline text="ixFirstStep = 1;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="if (steps [ixLastStep].length == 0) {">
							<outline text="ixLastStep--;"></outline>
							<outline text="}"></outline>
							</outline>
						<outline text="nextStep (ixFirstStep, domainOutline, function (flfound, nomad) {">
							<outline text=""></outline>
							<outline text="function renderOutline (nomad) {">
								<outline text="opml.expandIncludes (nomad, function (expandedOutline) {">
									<outline text="htmltext = riverRenderOutline (expandedOutline, false, undefined, undefined, true);"></outline>
									<outline text="nomad.thispageurl = thisPageUrl;"></outline>
									<outline text="nomad.disqusGroupname = getDisqusGroup (urlOutline);"></outline>
									<outline text="nomad.whenModified = whenModified; //7/16/16 by DW"></outline>
									<outline isComment="true" text="nomad.rssfeedurl = &quot;http://liveblog.co/users/davewiner/feeds/outline005.xml&quot;;"></outline>
									<outline text="renderThroughTemplate (htmltext, nomad, urlTemplate, httpReadUrl, function (s) {">
										<outline text="returnHtml (s);"></outline>
										<outline text="});"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="function renderPresentation (nomad) { ">
								<outline text="opml.expandIncludes (nomad, function (theOutline) {">
									<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"></outline>
									<outline text="function add (s) {">
										<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
										<outline text="var theNode = theOutline.subs [i];"></outline>
										<outline text="function dolevel (theNode) {">
											<outline text="if (theNode.subs !== undefined) {">
												<outline text="add (&quot;&lt;ul&gt;&quot;); indentlevel++"></outline>
												<outline text="for (var i = 0; i &lt; theNode.subs.length; i++) {">
													<outline text="var theSub = theNode.subs [i];"></outline>
													<outline text="add (&quot;&lt;li&gt;&quot; + theSub.text + &quot;&lt;/li&gt;&quot;)"></outline>
													<outline text="dolevel (theSub)"></outline>
													<outline text="}"></outline>
													</outline>
												<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										<outline text="add (&quot;&lt;section&gt;&quot;); indentlevel++"></outline>
										<outline text="add (&quot;&lt;h2&gt;&quot; + theNode.text + &quot;&lt;/h2&gt;&quot;)"></outline>
										<outline text="dolevel (theNode)"></outline>
										<outline text="add (&quot;&lt;/section&gt;&quot;); indentlevel--"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="if (nomad.theme === undefined) {">
										<outline text="nomad.theme = &quot;default&quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (nomad.transition === undefined) {">
										<outline text="nomad.transition = &quot;default&quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="renderThroughTemplate (htmltext, nomad, urlTemplate, httpReadUrl, function (s) {">
										<outline text="returnHtml (s);"></outline>
										<outline text="});"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="function renderIndex (nomad) { ">
								<outline text="function dosubs (theOutline) {">
									<outline text="var htmltext = &quot;&quot;, indentlevel = 0;"></outline>
									<outline text="function add (s) {">
										<outline text="htmltext += utils.filledString (&quot;\t&quot;, indentlevel) + s + &quot;\n&quot;;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="if (theOutline.subs !== undefined) {">
										<outline text="add (&quot;&lt;ul class=\&quot;ulIndexList\&quot;&gt;&quot;); indentlevel++;"></outline>
										<outline text="for (var i = 0; i &lt; theOutline.subs.length; i++) {">
											<outline text="var theSub = theOutline.subs [i];"></outline>
											<outline text="if (theSub.subs !== undefined) {">
												<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + getNameAtt (theSub) + &quot;\&quot;&gt;&quot; + theSub.text + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="var theType = utils.stringLower (theSub.type);"></outline>
												<outline isComment="true" text="console.log (theSub.text + &quot;: type == &quot; + theType)"></outline>
												<outline text="switch (theType) {">
													<outline text="case &quot;include&quot;: case &quot;thumblist&quot;: case &quot;photo&quot;: case &quot;redirect&quot;:">
														<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + getNameAtt (theSub) + &quot;\&quot;&gt;&quot; + theSub.text + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"></outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="case &quot;link&quot;:">
														<outline text="add (&quot;&lt;li&gt;&lt;a href=\&quot;&quot; + theSub.url + &quot;\&quot;&gt;&quot; + theSub.text + &quot;&lt;/a&gt;&lt;/li&gt;&quot;);"></outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="default:">
														<outline text="add (&quot;&lt;li&gt;&quot; + theSub.text + &quot;&lt;/li&gt;&quot;);"></outline>
														<outline text="break;"></outline>
														</outline>
													<outline text="}"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="}"></outline>
											</outline>
										<outline text="add (&quot;&lt;/ul&gt;&quot;); indentlevel--;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="renderThroughTemplate (htmltext, nomad, urlTemplate, httpReadUrl, function (s) {">
										<outline text="returnHtml (s);"></outline>
										<outline text="});"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="if (nomad.type == &quot;include&quot;) {">
									<outline text="if (nomad.url !== undefined) {">
										<outline text="readInclude (nomad, function (theIncludedOutline) {">
											<outline text="if (theIncludedOutline !== undefined) {">
												<outline text="dosubs (theIncludedOutline);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="});"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="console.log (&quot;include node with no url attribute at step == &quot; + theStep);"></outline>
										<outline text="callback (false);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="dosubs (nomad);"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="function renderPhoto (theOutline) { //7/9/15 by DW">
								<outline isComment="true" text="http://static.scripting.com/photos/archive/2013/08/02/nyTimesFrontPage/photo.xml"></outline>
								<outline text="renderThroughTemplate (&quot;&quot;, nomad, urlTemplate, httpReadUrl, function (s) {">
									<outline text="returnHtml (s);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text=""></outline>
							<outline text="if (flfound) {">
								<outline text="var theType = utils.stringLower (getNodeType (nomad)), urlTemplate = getTemplate (theType);"></outline>
								<outline text="nomad.urlOutline = urlOutline; //so it gets into the pagetable -- 7/10/15 by DW"></outline>
								<outline text=""></outline>
								<outline text="if (parsedUrl.query.format !== undefined) { //1/17/16 by DW">
									<outline isComment="true" text="console.log (&quot;worldOutline: parsedUrl.query.format == &quot; + parsedUrl.query.format);"></outline>
									<outline text="switch (utils.stringLower (parsedUrl.query.format)) {">
										<outline text="case &quot;json&quot;: ">
											<outline text="callback (200, {&quot;Content-Type&quot;: &quot;application/json&quot;}, utils.jsonStringify (nomad));"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;opml&quot;: ">
											<outline text="callback (200, {&quot;Content-Type&quot;: &quot;text/xml&quot;}, outlineToOPML (nomad));"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="default:">
											<outline text="return500 (&quot;Can't return the data because the format requested, &quot; + parsedUrl.query.format + &quot; is not supported.&quot;);"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline isComment="true" text="console.log (&quot;the walk ended at this node -- &quot; + debugNode (nomad));"></outline>
									<outline isComment="true" text="console.log (&quot;we're using this template -- &quot; + urlTemplate);"></outline>
									<outline text=""></outline>
									<outline text="switch (theType) {">
										<outline text="case &quot;outline&quot;: case &quot;howto&quot;:  case &quot;blogpost&quot;:  case &quot;thread&quot;:">
											<outline text="renderOutline (nomad);"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;presentation&quot;:">
											<outline text="renderPresentation (nomad);"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;photo&quot;:">
											<outline text="renderPhoto (nomad);"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;thumblist&quot;:">
											<outline text="if (utils.endsWith (path, &quot;/&quot;)) {">
												<outline text="readOpmlWithCache (nomad.url, function (theOutline, err) {">
													<outline text="if (err) {">
														<outline text="return500 (err.message);"></outline>
														<outline text="}"></outline>
														</outline>
													<outline text="else {">
														<outline text="htmltext = renderThumblist (theOutline);"></outline>
														<outline text=""></outline>
														<outline text="nomad.thispageurl = thisPageUrl;"></outline>
														<outline isComment="true" text="nomad.rssfeedurl = &quot;http://liveblog.co/users/davewiner/feeds/outline005.xml&quot;;"></outline>
														<outline text=""></outline>
														<outline text="renderThroughTemplate (htmltext, nomad, urlTemplate, httpReadUrl, function (s) {">
															<outline text="returnHtml (s);"></outline>
															<outline text="});"></outline>
															</outline>
														<outline text="}"></outline>
														</outline>
													<outline text="}, false);"></outline>
													</outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="returnRedirect (path + &quot;/&quot;);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;code&quot;:">
											<outline text="callback (200, {&quot;Content-Type&quot;: &quot;application/javascript&quot;}, outlineToCode (nomad));"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;html&quot;:">
											<outline text="gatherTemplateAtts (nomad, pagetable);"></outline>
											<outline text="returnHtml (outlineToCode (nomad, pagetable, true));"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;redirect&quot;: ">
											<outline text="returnRedirect (nomad.url);"></outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="case &quot;index&quot;: default:">
											<outline text="if (utils.endsWith (path, &quot;/&quot;)) {">
												<outline text="renderIndex (nomad);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="else {">
												<outline text="returnRedirect (path + &quot;/&quot;);"></outline>
												<outline text="}"></outline>
												</outline>
											<outline text="break;"></outline>
											</outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="handleSystemRequest (path, parsedUrl, callback);"></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline text="});"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="}, false);"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function handleRequest (httpRequest, httpResponse) {">
			<outline text="function writeHead (type) {">
				<outline text="if (type == undefined) {">
					<outline text="type = &quot;text/plain&quot;;"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function return404 () {">
				<outline text="get404page (function (s, type) {">
					<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: type, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
					<outline text="httpResponse.end (s);    "></outline>
					<outline text="});"></outline>
					</outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function returnRedirect (url) {">
				<outline text="httpResponse.writeHead (302, {&quot;location&quot;: url});"></outline>
				<outline text="httpResponse.end (&quot;Redirect to this URL: &quot; + url);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function respondWithObject (obj) {">
				<outline text="writeHead (&quot;application/json&quot;);"></outline>
				<outline text="httpResponse.end (utils.jsonStringify (obj));    "></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="function findDomainOutline (host, callback) { //determines which outline contains the indicated host">
				<outline text="var lowerhost = utils.stringLower (host);"></outline>
				<outline text="for (var x in globalDomains) {">
					<outline text="if (utils.stringLower (x) == lowerhost) {">
						<outline text="callback (globalDomains [x]);"></outline>
						<outline text="return;"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="callback (undefined);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:20 GMT" pgfnum="40664" text="try {">
				<outline created="Tue, 21 Jan 2014 00:21:43 GMT" pgfnum="36078" text="var parsedUrl = urlpack.parse (httpRequest.url, true), now = new Date (), startTime = now;"></outline>
				<outline text="var lowerpath = parsedUrl.pathname.toLowerCase (), host, port = 80, flLocalRequest = false, lowerhost;"></outline>
				<outline text=""></outline>
				<outline text="//set host, port, flLocalRequest">
					<outline text="host = httpRequest.headers.host;"></outline>
					<outline text="if (utils.stringContains (host, &quot;:&quot;)) {">
						<outline text="port = utils.stringNthField (host, &quot;:&quot;, 2);"></outline>
						<outline text="host = utils.stringNthField (host, &quot;:&quot;, 1);"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="flLocalRequest = utils.beginsWith (host, &quot;localhost&quot;);"></outline>
					<outline text="lowerhost = host.toLowerCase ();"></outline>
					</outline>
				<outline text=""></outline>
				<outline text="logRequest (httpRequest);"></outline>
				<outline text=""></outline>
				<outline text="//stats">
					<outline text="//hits today">
						<outline text="if (!utils.sameDay (now, worldOutlineStats.whenLastHit)) { //day rollover">
							<outline text="worldOutlineStats.ctHitsToday = 0;"></outline>
							<outline text="worldOutlineStats.hitsByDomainToday = {};"></outline>
							<outline text="worldOutlineStats.hitsByUrlToday = {};"></outline>
							<outline text="}"></outline>
							</outline>
						</outline>
					<outline text="worldOutlineStats.ctHits++;"></outline>
					<outline text="worldOutlineStats.whenLastHit = now;"></outline>
					<outline text="worldOutlineStats.ctHitsToday++;"></outline>
					<outline text="flStatsDirty = true;"></outline>
					</outline>
				<outline text=""></outline>
				<outline created="Thu, 01 May 2014 20:42:04 GMT" pgfnum="40803" text="switch (httpRequest.method) {">
					<outline created="Thu, 01 May 2014 20:42:39 GMT" pgfnum="40807" text="case &quot;GET&quot;:">
						<outline text="findDomainOutline (host, function (urlOutline) {">
							<outline text="if (urlOutline === undefined) { //not one of our domains">
								<outline text="handleSystemRequest (lowerpath, parsedUrl, function (code, headers, htmltext) {">
									<outline text="if (headers === undefined) {">
										<outline text="headers = new Object ();"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="headers [&quot;Access-Control-Allow-Origin&quot;] = &quot;*&quot;;"></outline>
									<outline text="httpResponse.writeHead (code, headers);"></outline>
									<outline text="httpResponse.end (htmltext);"></outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="//hits by domain, for all time, and for today">
									<outline text="if (worldOutlineStats.hitsByDomain [lowerhost] == undefined) {">
										<outline text="worldOutlineStats.hitsByDomain [lowerhost] = 1;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="worldOutlineStats.hitsByDomain [lowerhost]++;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="if (worldOutlineStats.hitsByDomainToday [lowerhost] == undefined) { //7/8/15 by DW">
										<outline text="worldOutlineStats.hitsByDomainToday [lowerhost] = 1;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="worldOutlineStats.hitsByDomainToday [lowerhost]++;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="var urltocount = &quot;http://&quot; + lowerhost + lowerpath;"></outline>
									<outline text="if (worldOutlineStats.hitsByUrlToday [urltocount] == undefined) { //7/9/15 by DW">
										<outline text="worldOutlineStats.hitsByUrlToday [urltocount] = 1;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="else {">
										<outline text="worldOutlineStats.hitsByUrlToday [urltocount]++;"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text=""></outline>
									<outline text="flStatsDirty = true;"></outline>
									</outline>
								<outline text="worldOutline (urlOutline, host, lowerpath, parsedUrl, function (code, headers, htmltext) {">
									<outline text="if (headers === undefined) {">
										<outline text="headers = new Object ();"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="headers [&quot;Access-Control-Allow-Origin&quot;] = &quot;*&quot;;"></outline>
									<outline text="httpResponse.writeHead (code, headers);"></outline>
									<outline text="httpResponse.end (htmltext);"></outline>
									<outline text="if (code == 200) {">
										<outline text="saveRenderedPage (host, lowerpath, htmltext);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="});"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline created="Thu, 01 May 2014 20:42:44 GMT" pgfnum="40808" text="break;"></outline>
						</outline>
					<outline created="Thu, 01 May 2014 20:42:24 GMT" isComment="true" pgfnum="40805" text="case &quot;POST&quot;: //12/2/14 by DW">
						<outline text="var body = &quot;&quot;;"></outline>
						<outline text="httpRequest.on (&quot;data&quot;, function (data) {">
							<outline text="body += data;"></outline>
							<outline text="});"></outline>
							</outline>
						<outline text="httpRequest.on (&quot;end&quot;, function () {">
							<outline text="var flPostAllowed = false;"></outline>
							<outline text=""></outline>
							<outline text="//set flPostAllowed -- 12/4/14 by DW">
								<outline text="if (flLocalRequest) {">
									<outline text="flPostAllowed = true;"></outline>
									<outline text="}"></outline>
									</outline>
								<outline text="else {">
									<outline text="if (remotePassword.length &gt; 0) { //must have password set">
										<outline text="flPostAllowed = (parsedUrl.query.password === remotePassword);"></outline>
										<outline text="}"></outline>
										</outline>
									<outline text="}"></outline>
									</outline>
								</outline>
							<outline text="if (flPostAllowed) {">
								<outline text="console.log (&quot;POST body length: &quot; + body.length);"></outline>
								<outline created="Thu, 01 May 2014 21:24:18 GMT" pgfnum="40824" text="switch (lowerpath) {">
									<outline text="case &quot;/setprefs&quot;: ">
										<outline text="var newprefs = JSON.parse (body);"></outline>
										<outline text="for (var x in newprefs) {">
											<outline text="serverData.prefs [x] = newprefs [x];"></outline>
											<outline text="}"></outline>
											</outline>
										<outline text="saveServerData ();"></outline>
										<outline text="respondWithObject ({});"></outline>
										<outline text="break;"></outline>
										</outline>
									<outline text="case &quot;/savelist&quot;: ">
										<outline text="httpResponse.writeHead (200, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
										<outline text="saveSubscriptionList (parsedUrl.query.listname, body);"></outline>
										<outline text="httpResponse.end (&quot;&quot;);    "></outline>
										<outline text="break;"></outline>
										</outline>
									<outline created="Tue, 21 Jan 2014 00:38:22 GMT" pgfnum="36084" text="default: //404 not found">
										<outline text="httpResponse.writeHead (404, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
										<outline text="httpResponse.end (&quot;\&quot;&quot; + lowerpath + &quot;\&quot; is not one of the endpoints defined by this server.&quot;);"></outline>
										</outline>
									<outline created="Thu, 01 May 2014 21:24:25 GMT" pgfnum="40827" text="}"></outline>
									</outline>
								<outline text="}"></outline>
								</outline>
							<outline text="else {">
								<outline text="httpResponse.writeHead (403, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
								<outline text="httpResponse.end (&quot;This feature can only be accessed locally.&quot;);    "></outline>
								<outline text="}"></outline>
								</outline>
							<outline text="});"></outline>
							</outline>
						<outline created="Thu, 01 May 2014 20:42:37 GMT" pgfnum="40806" text="break;"></outline>
						</outline>
					<outline created="Thu, 01 May 2014 20:42:10 GMT" pgfnum="40804" text="}"></outline>
					</outline>
				<outline created="Tue, 29 Apr 2014 21:25:26 GMT" pgfnum="40668" text="}"></outline>
				</outline>
			<outline created="Tue, 29 Apr 2014 21:25:27 GMT" pgfnum="40669" text="catch (tryError) {">
				<outline text="httpResponse.writeHead (503, {&quot;Content-Type&quot;: &quot;text/plain&quot;, &quot;Access-Control-Allow-Origin&quot;: &quot;*&quot;});"></outline>
				<outline text="httpResponse.end (tryError.message);    "></outline>
				<outline text="console.log (&quot;handleRequest: tryError.message == &quot; + tryError.message);"></outline>
				<outline created="Tue, 29 Apr 2014 21:25:35 GMT" pgfnum="40670" text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function loadConfig (callback) { ">
			<outline text="fs.readFile (configFname, function (err, data) {">
				<outline text="if (!err) {">
					<outline created="Tue, 11 Jun 2013 13:43:44 GMT" pgfnum="25734" text="var storedConfig = JSON.parse (data.toString ());"></outline>
					<outline text="console.log (&quot;loadConfig: config == &quot; + utils.jsonStringify (storedConfig)); //xxx"></outline>
					<outline text="for (var x in storedConfig) {">
						<outline text="appConfig [x] = storedConfig [x];"></outline>
						<outline text="}"></outline>
						</outline>
					<outline text="}"></outline>
					</outline>
				<outline text="if (callback !== undefined) {">
					<outline text="callback ();"></outline>
					<outline text="}"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function everyMinute () {">
			<outline text="outlineCache = new Object ();"></outline>
			<outline text="if (flStatsDirty) {">
				<outline text="flStatsDirty = false;"></outline>
				<outline text="worldOutlineStats.ctWriteStats++;"></outline>
				<outline text="worldOutlineStats.whenLastWriteStats = new Date ();"></outline>
				<outline text="writeStats (fnameStats, worldOutlineStats);"></outline>
				<outline text="}"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="function startup () {">
			<outline text="loadConfig (function () {">
				<outline text="readStats (fnameStats, worldOutlineStats, function () {">
					<outline isComment="true" text="console.log (&quot;worldOutlineStats == &quot; + utils.jsonStringify (worldOutlineStats));"></outline>
					<outline text=""></outline>
					<outline text="worldOutlineStats.ctStarts++;"></outline>
					<outline text="worldOutlineStats.whenLastStart = new Date ();"></outline>
					<outline text="flStatsDirty = true;"></outline>
					<outline text=""></outline>
					<outline text="buildDomainsTable (function (domains) {">
						<outline text="console.log (&quot;buildDomainsTable: domains == &quot; + utils.jsonStringify (domains));"></outline>
						<outline text=""></outline>
						<outline created="Mon, 03 Feb 2014 18:54:58 GMT" pgfnum="36999" text="console.log (&quot;\n&quot; + myProductName + &quot; v&quot; + myVersion + &quot; running on port &quot; + appConfig.port + &quot;.\n&quot;);"></outline>
						<outline text="http.createServer (handleRequest).listen (appConfig.port);"></outline>
						<outline text=""></outline>
						<outline text="setInterval (everyMinute, 60000); "></outline>
						<outline isComment="true" text="setInterval (everySecond, 1000); "></outline>
						<outline text="});"></outline>
						</outline>
					<outline text="});"></outline>
					</outline>
				<outline text="});"></outline>
				</outline>
			<outline text="}"></outline>
			</outline>
		<outline text="startup ();"></outline>
		</body>
	</opml>
